rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Default: deny all access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection - allow public read for debugging
    match /users/{userId} {
      // Allow public read access for debugging
      allow read: if true;
      // Allow create if user is authenticated and creating their own document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow update/delete if user is authenticated and writing to their own document
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Usernames collection
    match /usernames/{username} {
      // Allow public read access
      allow read: if true;
      // Allow write if user is authenticated
      allow write: if request.auth != null;
      // Validate that the value contains a uid field
      allow create, update: if request.auth != null && 
        request.resource.data.keys().hasAny(['uid']);
    }
    
    // Posts collection - allow public read for debugging
    match /posts/{postId} {
      // Allow public read access for debugging
      allow read: if true;
      // Allow write if user is authenticated
      allow write: if request.auth != null;
      
      // Comments subcollection
      match /comments/{commentId} {
        // Allow public read access
        allow read: if true;
        // Allow write if user is authenticated
        allow write: if request.auth != null;
      }
      
      // Likes subcollection
      match /likes/{likeId} {
        // Allow public read access
        allow read: if true;
        // Allow write if user is authenticated
        allow write: if request.auth != null;
      }
    }

    // Photos collection: allow public read, authenticated write
    match /photos/{photoId} {
      allow read: if true; // Allow public read for displaying photos
      allow write: if request.auth != null
        && request.auth.uid == resource.data.userId;
      
      // On create, resource.data may not exist yet, so allow if userId matches request.auth.uid
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
    }

    // Albums collection: users can read and write only their own albums
    match /albums/{albumId} {
      allow read, write: if request.auth != null
        && request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
    }

    // Binders collection: users can read and write only their own binders
    match /binders/{binderId} {
      allow read, write: if request.auth != null
        && request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
    }

    // Notebooks collection: users can read and write only their own notebooks
    match /notebooks/{notebookId} {
      allow read, write: if request.auth != null
        && request.auth.uid == resource.data.userId;
      
      allow create: if request.auth != null
        && request.resource.data.userId == request.auth.uid;
    }

    // Likes collection: allow public read, authenticated write
    match /likes/{likeId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Comments collection: allow public read, authenticated write
    match /comments/{commentId} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Followers collection: allow authenticated users to follow/unfollow
    match /followers/{followId} {
      allow read: if request.auth != null;
      
      // Allow create if user is authenticated and creating their own follow relationship
      allow create: if request.auth != null 
        && request.resource.data.followerId == request.auth.uid;
      
      // Allow update if user is authenticated and updating their own follow relationship
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.followerId;
      
      // Allow delete if user is authenticated and the followId contains their UID
      // FollowId format is: "followerId-followedUserId"
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.followerId;
    }

    // Chats collection: users can only access chats they're participants in
    match /chats/{chatId} {
      // ChatId format is: "uid1_uid2" where uid1 and uid2 are sorted alphabetically
      // Users can only access chats where their UID is part of the chatId
      allow read, write: if request.auth != null 
        && (chatId.matches(request.auth.uid + '_.*') || chatId.matches('.*_' + request.auth.uid));
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null 
          && (chatId.matches(request.auth.uid + '_.*') || chatId.matches('.*_' + request.auth.uid));
      }
    }

    // Conversations collection: users can only access conversations they're participants in
    match /conversations/{conversationId} {
      // Allow create if user is authenticated and is included in the participants array
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participants;
      
      // Allow read/write if user is authenticated and is in the participants array
      allow read, write: if request.auth != null 
        && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
      }
    }
  }
} 